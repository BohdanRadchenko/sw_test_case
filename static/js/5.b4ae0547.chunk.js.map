{"version":3,"sources":["redux/starships/starshipsSelectors.js","redux/vehicles/vehiclesSelectors.js","redux/people/peopleOperations.js","redux/people/peopleActions.js","redux/planets/planetsOperations.js","redux/planets/planetsActions.js","redux/species/speciesOperations.js","redux/species/speciesActions.js","components/People/PeopleList/PeopleList.js","redux/vehicles/vehiclesOperations.js","redux/vehicles/vehiclesActions.js","redux/starships/starshipsOperations.js","redux/starships/starshipsActions.js","components/Planets/PlanetsList/PlanetsList.js","components/Species/SpeciesList/SpeciesList.js","components/Vehicles/VehiclesList/VehiclesList.js","components/Starships/StarshipsList/StarshipsList.js","components/Films/DetailFilms/DetailFilms.js","pages/DetailFilmsPage.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","redux/films/filmsSelectors.js","redux/people/peopleSelectors.js","redux/planets/planetsSelectors.js","redux/species/speciesSelectors.js"],"names":["getStarships","state","starships","items","getLoading","loading","paginationStarships","results","starshipsPrev","previous","starshipsNext","next","getAllVehicles","vehicles","paginationVehicles","vehiclesPrev","vehiclesNext","fetchPeopleById","count","dispatch","URL","type","ActionType","FETCH_PEOPLE_BY_ID_REQUEST","payload","axios","get","then","response","people","data","id","FETCH_PEOPLE_BY_ID_SUCCESS","catch","error","FETCH_PEOPLE_BY_ID_ERROR","fetchPeopleByIdError","fetchPaginationPeople","page","FETCH_PAGINATION_PEOPLE_REQUEST","FETCH_PAGINATION_PEOPLE_SUCCESS","fetchPlanetsById","FETCH_PLANETS_BY_ID_REQUEST","planets","FETCH_PLANETS_BY_ID_SUCCESS","FETCH_PLANETS_BY_ID_ERROR","fetchPlanetsByIdError","fetchPaginationPlanets","FETCH_PAGINATION_PLANETS_REQUEST","FETCH_PAGINATION_PLANETS_SUCCESS","fetchSpeciesById","FETCH_SPECIES_BY_ID_REQUEST","species","FETCH_SPECIES_BY_ID_SUCCESS","FETCH_SPECIES_BY_ID_ERROR","fetchSpeciesByIdError","fetchPaginationSpecies","FETCH_PAGINATION_SPECIES_REQUEST","FETCH_PAGINATION_SPECIES_SUCCESS","style","position","display","connect","peopleSelectors","length","map","el","i","key","to","name","fetchVehiclesById","FETCH_VEHICLES_BY_ID_REQUEST","FETCH_VEHICLES_BY_ID_SUCCESS","FETCH_VEHICLES_BY_ID_ERROR","fetchVehiclesByIdError","fetchPaginationVehicles","FETCH_PAGINATION_VEHICLES_REQUEST","FETCH_PAGINATION_VEHICLES_SUCCESS","fetchStarshipsById","FETCH_STARSHIPS_BY_ID_REQUEST","FETCH_STARSHIPS_BY_ID_SUCCESS","FETCH_STARSHIPS_BY_ID_ERROR","fetchStarshipsByIdError","fetchPaginationStarships","FETCH_PAGINATION_STARSHIPS_REQUEST","FETCH_PAGINATION_STARSHIPS_SUCCESS","planetsSelectors","speciesSelectors","vehiclesSelectors","starshipsSelectors","console","log","filmsSelectors","allPlanets","allStarships","allVehicles","allSpecies","title","opening_crawl","director","producer","release_date","characters","history","useHistory","Loaders","PeopleList","PlanetsList","StarshipsList","VehiclesList","SpeciesList","onClick","goBack","DetailFilmsPage","films","filmId","Number","useParams","film","filter","episode_id","split","mDTP","peopleOperations","planetsOperations","starshipsOperation","vehiclesOperations","speciesOperations","_defineProperty","obj","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","arguments","source","forEach","getOwnPropertyDescriptors","defineProperties","getAllFilms","getPeople","sort","a","b","paginationPeople","peoplePrev","peopleNext","getPlanets","paginationPlanets","planetsPrev","planetsNext","getAllSpecies","paginationSpecies","speciesPrev","speciesNext"],"mappings":"0FAAA,0KAAO,IAAMA,EAAe,SAAAC,GAAK,OAAIA,EAAMC,UAAUC,OAExCC,EAAa,SAAAH,GAAK,OAAIA,EAAMC,UAAUG,SAGtCC,EAAsB,SAAAL,GAAK,OAAIA,EAAMC,UAAUI,oBAAoBC,SAEnEC,EAAgB,SAAAP,GAAK,OAAIA,EAAMC,UAAUI,oBAAoBG,UAE7DC,EAAgB,SAAAT,GAAK,OAAIA,EAAMC,UAAUI,oBAAoBK,O,iCCT1E,0KAAO,IAAMC,EAAiB,SAAAX,GAAK,OAAIA,EAAMY,SAASV,OAEzCC,EAAa,SAAAH,GAAK,OAAIA,EAAMY,SAASR,SAGrCS,EAAqB,SAAAb,GAAK,OAAIA,EAAMY,SAASC,mBAAmBP,SAEhEQ,EAAe,SAAAd,GAAK,OAAIA,EAAMY,SAASC,mBAAmBL,UAE1DO,EAAe,SAAAf,GAAK,OAAIA,EAAMY,SAASC,mBAAmBH,O,yICChE,IAAMM,EAAkB,SAACC,GAAD,OAAW,SAAAC,GAC1C,IAAMC,EAAG,sCAAkCF,GACzCC,ECR2C,CAC3CE,KAAMC,IAAWC,2BACjBC,QAAU,KDOVC,IACGC,IAAIN,GACJO,MAAK,SAAAC,GCN4B,IAAAC,EDOhCV,GCPgCU,EDOA,eAAID,EAASE,KAAd,CAAoBC,GAAKb,ICPb,CAC/CG,KAAMC,IAAWU,2BACjBR,QAAU,CACRK,gBDMCI,OAAM,SAAAC,GACLf,ECH8B,SAAAe,GAAK,MAAK,CAC5Cb,KAAMC,IAAWa,yBACjBX,QAAU,CACRU,UDAWE,CAAqBF,SAIvBG,EAAwB,SAAAC,GAAI,OAAI,SAAAnB,GAC3CA,ECAiD,CACjDE,KAAMC,IAAWiB,gCACjBf,QAAU,KDDV,IAAMJ,EAAG,4CAAwCkB,GACjDb,IACGC,IAAIN,GACJO,MAAK,SAAAC,GAAQ,OAAIT,GCCsBU,EDDgBD,EAASE,KCCd,CACrDT,KAAMC,IAAWkB,gCACjBhB,QAAUK,KAFgC,IAAAA,Q,yIClBrC,IAAMY,EAAmB,SAACvB,GAAD,OAAW,SAAAC,GAC3C,IAAMC,EAAG,uCAAmCF,GAC1CC,ECX4C,CAC5CE,KAAMC,IAAWoB,4BACjBlB,QAAU,KDUVC,IACGC,IAAIN,GACJO,MAAK,SAAAC,GCT6B,IAAAe,EDUjCxB,GCViCwB,EDUA,eAAIf,EAASE,KAAd,CAAoBC,GAAKb,ICVZ,CACjDG,KAAMC,IAAWsB,4BACjBpB,QAAU,CACRmB,iBDSCV,OAAM,SAAAC,GACLf,ECN+B,SAAAe,GAAK,MAAK,CAC7Cb,KAAMC,IAAWuB,0BACjBrB,QAAU,CACRU,UDGWY,CAAsBZ,SAKxBa,EAAyB,SAAAT,GAAI,OAAI,SAAAnB,GAC5CA,ECJkD,CAClDE,KAAMC,IAAW0B,iCACjBxB,QAAU,KDGV,IAAMJ,EAAG,6CAAyCkB,GAClDb,IACGC,IAAIN,GACJO,MAAK,SAAAC,GAAQ,OAAIT,GCHuBwB,EDGgBf,EAASE,KCHb,CACvDT,KAAMC,IAAW2B,iCACjBzB,QAAUmB,KAFiC,IAAAA,Q,yIClBtC,IAAMO,EAAmB,SAAChC,GAAD,OAAW,SAAAC,GAC3C,IAAMC,EAAG,uCAAmCF,GAC1CC,ECT4C,CAC5CE,KAAMC,IAAW6B,8BDSjB1B,IACGC,IAAIN,GACJO,MAAK,SAAAC,GCR6B,IAAAwB,EDSjCjC,GCTiCiC,EDSA,eAAIxB,EAASE,KAAd,CAAoBC,GAAKb,ICTZ,CACjDG,KAAMC,IAAW+B,4BACjB7B,QAAU,CACR4B,iBDQCnB,OAAM,SAAAC,GACLf,ECL+B,SAAAe,GAAK,MAAK,CAC7Cb,KAAMC,IAAWgC,0BACjB9B,QAAU,CACRU,UDEWqB,CAAsBrB,SAGxBsB,EAAyB,SAAAlB,GAAI,OAAI,SAAAnB,GAC5CA,ECDkD,CAClDE,KAAMC,IAAWmC,iCACjBjC,QAAU,KDAV,IAAMJ,EAAG,6CAAyCkB,GAClDb,IACGC,IAAIN,GACJO,MAAK,SAAAC,GAAQ,OAAIT,GCAuBiC,EDAgBxB,EAASE,KCAb,CACvDT,KAAMC,IAAWoC,iCACjBlC,QAAU4B,KAFiC,IAAAA,Q,iCC1B7C,mDAMMO,EAAQ,CACZC,SAAU,WACVC,QAAU,SA4BGC,iBAJF,SAAA7D,GAAK,MAAK,CACrBI,QAAU0D,IAA2B9D,MAGxB6D,EAzBK,SAAC,GAAuB,IAAtBjC,EAAqB,EAArBA,OAAQxB,EAAa,EAAbA,QAC5B,OACE,yBAAKsD,MAAOA,GACTtD,GAAW,kBAAC,IAAD,OACVA,GACA,sCACKwB,EAAOmC,QACR,4BACGnC,EAAOoC,KAAI,SAACC,EAAIC,GAAL,OACV,wBAAIC,IAAU,EAAJD,GACR,kBAAC,IAAD,CAASE,GAAE,kBAAaH,EAAGnC,KAAOmC,EAAGI,iB,yICbhD,IAAMC,EAAoB,SAACrD,GAAD,OAAW,SAAAC,GAC5C,IAAMC,EAAG,wCAAoCF,GAC3CC,ECR6C,CAC7CE,KAAMC,IAAWkD,+BDQjB/C,IACGC,IAAIN,GACJO,MAAK,SAAAC,GCP8B,IAAAf,EDQlCM,GCRkCN,EDQA,eAAIe,EAASE,KAAd,CAAoBC,GAAKb,ICRX,CACnDG,KAAMC,IAAWmD,6BACjBjD,QAAU,CACRX,kBDOCoB,OAAM,SAAAC,GACLf,ECJgC,SAAAe,GAAK,MAAK,CAC9Cb,KAAMC,IAAWoD,2BACjBlD,QAAU,CACRU,UDCWyC,CAAuBzC,SAIzB0C,EAA0B,SAAAtC,GAAI,OAAI,SAAAnB,GAC7CA,ECDmD,CACnDE,KAAMC,IAAWuD,kCACjBrD,QAAU,KDAV,IAAMJ,EAAG,8CAA0CkB,GACnDb,IACGC,IAAIN,GACJO,MAAK,SAAAC,GAAQ,OAAIT,GCAwBN,EDAgBe,EAASE,KCAZ,CACzDT,KAAMC,IAAWwD,kCACjBtD,QAAUX,KAFkC,IAAAA,Q,yICjBvC,IAAMkE,EAAqB,SAAC7D,GAAD,OAAW,SAAAC,GAC7C,IAAMC,EAAG,yCAAqCF,GAC5CC,ECT8C,CAC9CE,KAAMC,IAAW0D,8BACjBxD,QAAU,KDQVC,IACGC,IAAIN,GACJO,MAAK,SAAAC,GCP+B,IAAAe,EDQnCxB,GCRmCwB,EDQA,eAAIf,EAASE,KAAd,CAAoBC,GAAKb,ICRZ,CACnDG,KAAMC,IAAW2D,8BACjBzD,QAAU,CACRmB,iBDOCV,OAAM,SAAAC,GACLf,ECJiC,SAAAe,GAAK,MAAK,CAC/Cb,KAAMC,IAAW4D,4BACjB1D,QAAU,CACRU,UDCWiD,CAAwBjD,SAI1BkD,EAA2B,SAAA9C,GAAI,OAAI,SAAAnB,GAC9CA,ECAoD,CACpDE,KAAMC,IAAW+D,mCACjB7D,QAAU,KDDV,IAAMJ,EAAG,+CAA2CkB,GACpDb,IACGC,IAAIN,GACJO,MAAK,SAAAC,GAAQ,OAAIT,GCCyBjB,EDDgB0B,EAASE,KCCX,CAC3DT,KAAMC,IAAWgE,mCACjB9D,QAAUtB,KAFmC,IAAAA,Q,iCC5B/C,mDAMMyD,EAAQ,CACZC,SAAU,WACVC,QAAU,SA4BGC,iBAJF,SAAA7D,GAAK,MAAK,CACrBI,QAAUkF,IAA4BtF,MAGzB6D,EAzBK,SAAC,GAAwB,IAAvBnB,EAAsB,EAAtBA,QAAStC,EAAa,EAAbA,QAC7B,OACE,yBAAKsD,MAAOA,GACTtD,GAAW,kBAAC,IAAD,OACVA,GACA,sCACKsC,EAAQqB,QACT,4BACGrB,EAAQsB,KAAI,SAACC,EAAIC,GAAL,OACX,wBAAIC,IAAU,EAAJD,GACR,kBAAC,IAAD,CAASE,GAAE,mBAAcH,EAAGnC,KAAOmC,EAAGI,iB,iCCrBxD,mDAMMX,EAAQ,CACZC,SAAU,WACVC,QAAU,SA4BGC,iBAJF,SAAA7D,GAAK,MAAK,CACrBI,QAAUmF,IAA4BvF,MAGzB6D,EAzBK,SAAC,GAAwB,IAAvBV,EAAsB,EAAtBA,QAAS/C,EAAa,EAAbA,QAC7B,OACE,yBAAKsD,MAAOA,GACTtD,GAAW,kBAAC,IAAD,OACVA,GACA,sCACK+C,EAAQY,QACT,4BACGZ,EAAQa,KAAI,SAACC,EAAIC,GAAL,OACX,wBAAIC,IAAU,EAAJD,GACR,kBAAC,IAAD,CAASE,GAAE,mBAAcH,EAAGnC,KAAOmC,EAAGI,iB,iCCrBxD,oDAMMX,EAAQ,CACZC,SAAU,WACVC,QAAU,SA4BGC,iBAJF,SAAA7D,GAAK,MAAK,CACrBI,QAAUoF,IAA6BxF,MAG1B6D,EAzBK,SAAC,GAAyB,IAAxBjD,EAAuB,EAAvBA,SAAUR,EAAa,EAAbA,QAC9B,OACE,yBAAKsD,MAAOA,GACTtD,GAAW,kBAAC,IAAD,OACVA,GACA,sCACKQ,EAASmD,QACV,4BACGnD,EAASoD,KAAI,SAACC,EAAIC,GAAL,OACZ,wBAAIC,IAAU,EAAJD,GACR,kBAAC,IAAD,CAASE,GAAE,oBAAeH,EAAGnC,KAAOmC,EAAGI,iB,iCCrBzD,oDAMMX,EAAQ,CACZC,SAAU,WACVC,QAAU,SA6BGC,iBAJF,SAAA7D,GAAK,MAAK,CACrBI,QAAUqF,IAA8BzF,MAG3B6D,EA1BK,SAAC,GAA0B,IAAzB5D,EAAwB,EAAxBA,UAAWG,EAAa,EAAbA,QAE/B,OADAsF,QAAQC,IAAI1F,GAEV,yBAAKyD,MAAOA,GACTtD,GAAW,kBAAC,IAAD,OACVA,GACA,sCACKH,EAAU8D,QACX,4BACG9D,EAAU+D,KAAI,SAACC,EAAIC,GAAL,OACb,wBAAIC,IAAU,EAAJD,GACR,kBAAC,IAAD,CAASE,GAAE,qBAAgBH,EAAGnC,KAAOmC,EAAGI,iB,gOCyF3CR,eATF,SAAA7D,GAAK,MAAK,CACrBI,QAAUwF,IAA0B5F,GACpC4B,OAASkC,IAA0B9D,GACnC6F,WAAaP,IAA4BtF,GACzC8F,aAAeL,IAAgCzF,GAC/C+F,YAAcP,IAAiCxF,GAC/CgG,WAAaT,IAA+BvF,MAG/B6D,EA/FK,SAAC,GAiBd,IAhBLjC,EAgBI,EAhBJA,OACAiE,EAeI,EAfJA,WACAC,EAcI,EAdJA,aACAC,EAaI,EAbJA,YACAC,EAYI,EAZJA,WACAC,EAWI,EAXJA,MACAC,EAUI,EAVJA,cACAC,EASI,EATJA,SACAC,EAQI,EARJA,SACAC,EAOI,EAPJA,aACAC,EAMI,EANJA,WACA5D,EAKI,EALJA,QACAzC,EAII,EAJJA,UACAW,EAGI,EAHJA,SACAuC,EAEI,EAFJA,QACA/C,EACI,EADJA,QAGMmG,EAAUC,cAMhB,OAAGpG,EACM,kBAACqG,EAAA,EAAD,MAIP,6BACE,uCAAaR,GACb,0CAAgBC,GAChB,wCAAcC,GACd,wCAAcC,GACd,4CAAkBC,KAGfC,EAAWvC,QACZ,6BACE,0CACA,kBAAC2C,EAAA,EAAD,CAAY9E,OAAQA,OAKrBc,EAAQqB,QACT,6BACE,uCACA,kBAAC4C,EAAA,EAAD,CAAajE,QAASmD,OAKvB5F,EAAU8D,QACX,6BACE,yCACA,kBAAC6C,EAAA,EAAD,CAAe3G,UAAW6F,OAK3BlF,EAASmD,QACV,6BACE,wCACA,kBAAC8C,EAAA,EAAD,CAAcjG,SAAUmF,OAKzB5C,EAAQY,QACT,6BACE,uCACA,kBAAC+C,EAAA,EAAD,CAAa3D,QAAS6C,KAI1B,4BACEe,QAzDc,WAClBR,EAAQS,WAuDN,YC7FN,gDAWO,IAAMC,EAAkB,SAAC,GAOzB,IANLC,EAMI,EANJA,MACAlG,EAKI,EALJA,gBACAwB,EAII,EAJJA,iBACAsC,EAGI,EAHJA,mBACAR,EAEI,EAFJA,kBACArB,EACI,EADJA,iBAEMkE,EAASC,OAAOC,cAAYvF,IAC5BwF,EAAOJ,EAAMK,QAAO,SAAAtD,GAAE,OAAIA,EAAGuD,aAAeL,KAAQ,GA0B1D,OAxBIG,IACFA,EAAKhB,WAAWtC,KAAI,SAAAC,GAClB,IAAMhD,EAAQmG,OAAOnD,EAAGwD,MAAM,KAAK,IACnC,OAAOzG,EAAgBC,MAEzBqG,EAAK5E,QAAQsB,KAAI,SAAAC,GACf,IAAMhD,EAAQmG,OAAOnD,EAAGwD,MAAM,KAAK,IACnC,OAAOjF,EAAiBvB,MAE1BqG,EAAKrH,UAAU+D,KAAI,SAAAC,GACjB,IAAMhD,EAAQmG,OAAOnD,EAAGwD,MAAM,KAAK,IACnC,OAAO3C,EAAmB7D,MAE5BqG,EAAK1G,SAASoD,KAAI,SAAAC,GAChB,IAAMhD,EAAQmG,OAAOnD,EAAGwD,MAAM,KAAK,IACnC,OAAOnD,EAAkBrD,MAE3BqG,EAAKnE,QAAQa,KAAI,SAAAC,GACf,IAAMhD,EAAQmG,OAAOnD,EAAGwD,MAAM,KAAK,IACnC,OAAOxE,EAAiBhC,OAM1B,6BACGqG,GAAS,kBAAC,EAAgBA,KAS3BI,EAAO,CACX1G,gBAAiB2G,IACjBnF,iBAAkBoF,IAClB9C,mBAAoB+C,IACpBvD,kBAAmBwD,IACnB7E,iBAAkB8E,KAGLlE,uBAZF,SAAA7D,GAAK,MAAK,CACrBkH,MAAOtB,IAA2B5F,MAWP0H,EAAd7D,CAAoBoD,I,gCCjEpB,SAASe,EAAgBC,EAAK9D,EAAK+D,GAYhD,OAXI/D,KAAO8D,EACTE,OAAOC,eAAeH,EAAK9D,EAAK,CAC9B+D,MAAOA,EACPG,YAAY,EACZC,cAAc,EACdC,UAAU,IAGZN,EAAI9D,GAAO+D,EAGND,ECVT,SAASO,EAAQC,EAAQC,GACvB,IAAIC,EAAOR,OAAOQ,KAAKF,GAEvB,GAAIN,OAAOS,sBAAuB,CAChC,IAAIC,EAAUV,OAAOS,sBAAsBH,GACvCC,IAAgBG,EAAUA,EAAQtB,QAAO,SAAUuB,GACrD,OAAOX,OAAOY,yBAAyBN,EAAQK,GAAKT,eAEtDM,EAAKK,KAAKC,MAAMN,EAAME,GAGxB,OAAOF,EAGM,SAASO,EAAeC,GACrC,IAAK,IAAIjF,EAAI,EAAGA,EAAIkF,UAAUrF,OAAQG,IAAK,CACzC,IAAImF,EAAyB,MAAhBD,UAAUlF,GAAakF,UAAUlF,GAAK,GAE/CA,EAAI,EACNsE,EAAQL,OAAOkB,IAAS,GAAMC,SAAQ,SAAUnF,GAC9C,EAAegF,EAAQhF,EAAKkF,EAAOlF,OAE5BgE,OAAOoB,0BAChBpB,OAAOqB,iBAAiBL,EAAQhB,OAAOoB,0BAA0BF,IAEjEb,EAAQL,OAAOkB,IAASC,SAAQ,SAAUnF,GACxCgE,OAAOC,eAAee,EAAQhF,EAAKgE,OAAOY,yBAAyBM,EAAQlF,OAKjF,OAAOgF,EAjCT,mC,gCCAA,oEAAO,IAAMM,EAAc,SAAAzJ,GAAK,OAAIA,EAAMkH,MAAMhH,OAEnCC,EAAa,SAAAH,GAAK,OAAIA,EAAMkH,MAAM9G,U,gCCF/C,0KAAO,IAAMsJ,EAAY,SAAA1J,GAAK,OAAIA,EAAM4B,OAAO1B,MAAMyJ,MAAK,SAACC,EAAGC,GAC7D,OAAOD,EAAEvF,KAAOwF,EAAExF,SAGNlE,EAAa,SAAAH,GAAK,OAAIA,EAAM4B,OAAOxB,SAInC0J,EAAmB,SAAA9J,GAAK,OAAIA,EAAM4B,OAAOkI,iBAAiBxJ,SAE1DyJ,EAAa,SAAA/J,GAAK,OAAIA,EAAM4B,OAAOkI,iBAAiBtJ,UAEpDwJ,EAAa,SAAAhK,GAAK,OAAIA,EAAM4B,OAAOkI,iBAAiBpJ,O,gCCZjE,0KAAO,IAAMuJ,EAAa,SAAAjK,GAAK,OAAIA,EAAM0C,QAAQxC,OAEpCC,EAAa,SAAAH,GAAK,OAAIA,EAAM0C,QAAQtC,SAGpC8J,EAAoB,SAAAlK,GAAK,OAAIA,EAAM0C,QAAQwH,kBAAkB5J,SAE7D6J,EAAc,SAAAnK,GAAK,OAAIA,EAAM0C,QAAQwH,kBAAkB1J,UAEvD4J,EAAc,SAAApK,GAAK,OAAIA,EAAM0C,QAAQwH,kBAAkBxJ,O,gCCTpE,0KAAO,IAAM2J,EAAgB,SAAArK,GAAK,OAAIA,EAAMmD,QAAQjD,OAEvCC,EAAa,SAAAH,GAAK,OAAIA,EAAMmD,QAAQ/C,SAGpCkK,EAAoB,SAAAtK,GAAK,OAAIA,EAAMmD,QAAQmH,kBAAkBhK,SAE7DiK,EAAc,SAAAvK,GAAK,OAAIA,EAAMmD,QAAQmH,kBAAkB9J,UAEvDgK,EAAc,SAAAxK,GAAK,OAAIA,EAAMmD,QAAQmH,kBAAkB5J","file":"static/js/5.b4ae0547.chunk.js","sourcesContent":["export const getStarships = state => state.starships.items\r\n\r\nexport const getLoading = state => state.starships.loading\r\n\r\n//PAGINATION\r\nexport const paginationStarships = state => state.starships.paginationStarships.results\r\n\r\nexport const starshipsPrev = state => state.starships.paginationStarships.previous\r\n\r\nexport const starshipsNext = state => state.starships.paginationStarships.next\r\n","export const getAllVehicles = state => state.vehicles.items\r\n\r\nexport const getLoading = state => state.vehicles.loading\r\n\r\n//PAGINATION\r\nexport const paginationVehicles = state => state.vehicles.paginationVehicles.results\r\n\r\nexport const vehiclesPrev = state => state.vehicles.paginationVehicles.previous\r\n\r\nexport const vehiclesNext = state => state.vehicles.paginationVehicles.next\r\n","import axios from 'axios';\r\nimport {\r\n  fetchPeopleByIdRequest,\r\n  fetchPeopleByIdSuccess,\r\n  fetchPeopleByIdError,\r\n  fetchPaginationPeopleRequest,\r\n  fetchPaginationPeopleSuccess\r\n} from './peopleActions';\r\n\r\n\r\nexport const fetchPeopleById = (count) => dispatch => {\r\nconst URL = `https://swapi.co/api/people/${count}`\r\n  dispatch(fetchPeopleByIdRequest());\r\n  axios\r\n    .get(URL)\r\n    .then(response => {\r\n      dispatch(fetchPeopleByIdSuccess({...response.data, id : count}));\r\n    })\r\n    .catch(error => {\r\n      dispatch(fetchPeopleByIdError(error));\r\n    });\r\n};\r\n\r\nexport const fetchPaginationPeople = page => dispatch => {\r\n  dispatch(fetchPaginationPeopleRequest())\r\n  const URL = `https://swapi.co/api/people/?page=${page}`\r\n  axios\r\n    .get(URL)\r\n    .then(response => dispatch(fetchPaginationPeopleSuccess(response.data)))\r\n}","import {ActionType} from '../actionType'\r\n\r\n\r\n// FETCH BY ID\r\nexport const fetchPeopleByIdRequest = () => ({\r\n  type: ActionType.FETCH_PEOPLE_BY_ID_REQUEST,\r\n  payload : {}\r\n});\r\n\r\nexport const fetchPeopleByIdSuccess = people => ({\r\n  type: ActionType.FETCH_PEOPLE_BY_ID_SUCCESS,\r\n  payload : {\r\n    people,\r\n  }\r\n});\r\n\r\nexport const fetchPeopleByIdError = error => ({\r\n  type: ActionType.FETCH_PEOPLE_BY_ID_ERROR,\r\n  payload : {\r\n    error,\r\n  }\r\n});\r\n\r\n// FETCH PAGINATION\r\nexport const fetchPaginationPeopleRequest = () => ({\r\n  type: ActionType.FETCH_PAGINATION_PEOPLE_REQUEST,\r\n  payload : {}\r\n});\r\n\r\nexport const fetchPaginationPeopleSuccess = people => ({\r\n  type: ActionType.FETCH_PAGINATION_PEOPLE_SUCCESS,\r\n  payload : people\r\n});\r\n\r\nexport const fetchPaginationPeopleError = error => ({\r\n  type: ActionType.FETCH_PAGINATION_PEOPLE_ERROR,\r\n  payload : {\r\n    error,\r\n  }\r\n});\r\n","import axios from 'axios';\r\nimport {\r\n  fetchPlanetsByIdRequest,\r\n  fetchPlanetsByIdSuccess,\r\n  fetchPlanetsByIdError,\r\n  fetchPaginationPlanetsRequest,\r\n  fetchPaginationPlanetsSuccess\r\n} from './planetsActions';\r\n\r\n\r\n\r\nexport const fetchPlanetsById = (count) => dispatch => {\r\nconst URL = `https://swapi.co/api/planets/${count}`\r\n  dispatch(fetchPlanetsByIdRequest());\r\n  axios\r\n    .get(URL)\r\n    .then(response => {\r\n      dispatch(fetchPlanetsByIdSuccess({...response.data, id : count}));\r\n    })\r\n    .catch(error => {\r\n      dispatch(fetchPlanetsByIdError(error));\r\n    });\r\n};\r\n\r\n//\r\nexport const fetchPaginationPlanets = page => dispatch => {\r\n  dispatch(fetchPaginationPlanetsRequest())\r\n  const URL = `https://swapi.co/api/planets/?page=${page}`\r\n  axios\r\n    .get(URL)\r\n    .then(response => dispatch(fetchPaginationPlanetsSuccess(response.data)))\r\n}","import {ActionType} from '../actionType'\r\n\r\nexport const fetchPlanetsByIdRequest = () => ({\r\n  type: ActionType.FETCH_PLANETS_BY_ID_REQUEST,\r\n  payload : {}\r\n});\r\n\r\nexport const fetchPlanetsByIdSuccess = planets => ({\r\n  type: ActionType.FETCH_PLANETS_BY_ID_SUCCESS,\r\n  payload : {\r\n    planets,\r\n  }\r\n});\r\n\r\nexport const fetchPlanetsByIdError = error => ({\r\n  type: ActionType.FETCH_PLANETS_BY_ID_ERROR,\r\n  payload : {\r\n    error,\r\n  }\r\n});\r\n\r\n// FETCH PAGINATION\r\nexport const fetchPaginationPlanetsRequest = () => ({\r\n  type: ActionType.FETCH_PAGINATION_PLANETS_REQUEST,\r\n  payload : []\r\n});\r\n\r\nexport const fetchPaginationPlanetsSuccess = planets => ({\r\n  type: ActionType.FETCH_PAGINATION_PLANETS_SUCCESS,\r\n  payload : planets\r\n});\r\n\r\nexport const fetchPaginationPlanetsError = error => ({\r\n  type: ActionType.FETCH_PAGINATION_PLANETS_ERROR,\r\n  payload : {\r\n    error,\r\n  }\r\n});\r\n\r\n","import axios from 'axios';\r\nimport {\r\n  fetchSpeciesByIdRequest,\r\n  fetchSpeciesByIdSuccess,\r\n  fetchSpeciesByIdError,\r\n  fetchPaginationSpeciesRequest,\r\n  fetchPaginationSpeciesSuccess\r\n} from './speciesActions';\r\n\r\nexport const fetchSpeciesById = (count) => dispatch => {\r\nconst URL = `https://swapi.co/api/species/${count}`\r\n  dispatch(fetchSpeciesByIdRequest());\r\n  axios\r\n    .get(URL)\r\n    .then(response => {\r\n      dispatch(fetchSpeciesByIdSuccess({...response.data, id : count}));\r\n    })\r\n    .catch(error => {\r\n      dispatch(fetchSpeciesByIdError(error));\r\n    });\r\n};\r\nexport const fetchPaginationSpecies = page => dispatch => {\r\n  dispatch(fetchPaginationSpeciesRequest())\r\n  const URL = `https://swapi.co/api/species/?page=${page}`\r\n  axios\r\n    .get(URL)\r\n    .then(response => dispatch(fetchPaginationSpeciesSuccess(response.data)))\r\n}","import {ActionType} from '../actionType'\r\n\r\nexport const fetchSpeciesByIdRequest = () => ({\r\n  type: ActionType.FETCH_SPECIES_BY_ID_REQUEST,\r\n});\r\n\r\nexport const fetchSpeciesByIdSuccess = species => ({\r\n  type: ActionType.FETCH_SPECIES_BY_ID_SUCCESS,\r\n  payload : {\r\n    species,\r\n  }\r\n});\r\n\r\nexport const fetchSpeciesByIdError = error => ({\r\n  type: ActionType.FETCH_SPECIES_BY_ID_ERROR,\r\n  payload : {\r\n    error,\r\n  }\r\n});\r\n\r\n// FETCH PAGINATION\r\nexport const fetchPaginationSpeciesRequest = () => ({\r\n  type: ActionType.FETCH_PAGINATION_SPECIES_REQUEST,\r\n  payload : []\r\n});\r\n\r\nexport const fetchPaginationSpeciesSuccess = species => ({\r\n  type: ActionType.FETCH_PAGINATION_SPECIES_SUCCESS,\r\n  payload : species\r\n});\r\n\r\nexport const fetchPaginationSpeciesError = error => ({\r\n  type: ActionType.FETCH_PAGINATION_SPECIES_ERROR,\r\n  payload : {\r\n    error,\r\n  }\r\n});\r\n","import React from 'react';\r\nimport { NavLink } from \"react-router-dom\";\r\nimport {connect} from 'react-redux'\r\nimport * as peopleSelectors from '../../../redux/people/peopleSelectors'\r\nimport { Loaders } from \"../../Loaders\";\r\n\r\nconst style = {\r\n  position: 'relative',\r\n  display : 'block'\r\n}\r\n\r\nconst SpeciesList = ({people, loading}) => {\r\n  return (\r\n    <div style={style}>\r\n      {loading && <Loaders/>}\r\n      {!loading && (\r\n        <>\r\n          {!!people.length && (\r\n            <ul>\r\n              {people.map((el, i) => (\r\n                <li key={ i * 9}>\r\n                  <NavLink to={`/people/${el.id}`}>{el.name}</NavLink>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mSTP = state => ({\r\n  loading : peopleSelectors.getLoading(state)\r\n})\r\n\r\nexport default connect(mSTP)(SpeciesList);","import axios from 'axios';\r\nimport {\r\n  fetchVehiclesByIdRequest,\r\n  fetchVehiclesByIdSuccess,\r\n  fetchVehiclesByIdError,\r\n  fetchPaginationVehiclesRequest, fetchPaginationVehiclesSuccess\r\n} from './vehiclesActions';\r\n\r\nexport const fetchVehiclesById = (count) => dispatch => {\r\nconst URL = `https://swapi.co/api/vehicles/${count}`\r\n  dispatch(fetchVehiclesByIdRequest());\r\n  axios\r\n    .get(URL)\r\n    .then(response => {\r\n      dispatch(fetchVehiclesByIdSuccess({...response.data, id : count}));\r\n    })\r\n    .catch(error => {\r\n      dispatch(fetchVehiclesByIdError(error));\r\n    });\r\n};\r\n\r\nexport const fetchPaginationVehicles = page => dispatch => {\r\n  dispatch(fetchPaginationVehiclesRequest())\r\n  const URL = `https://swapi.co/api/vehicles/?page=${page}`\r\n  axios\r\n    .get(URL)\r\n    .then(response => dispatch(fetchPaginationVehiclesSuccess(response.data)))\r\n}","import {ActionType} from '../actionType'\r\n\r\nexport const fetchVehiclesByIdRequest = () => ({\r\n  type: ActionType.FETCH_VEHICLES_BY_ID_REQUEST,\r\n});\r\n\r\nexport const fetchVehiclesByIdSuccess = vehicles => ({\r\n  type: ActionType.FETCH_VEHICLES_BY_ID_SUCCESS,\r\n  payload : {\r\n    vehicles,\r\n  }\r\n});\r\n\r\nexport const fetchVehiclesByIdError = error => ({\r\n  type: ActionType.FETCH_VEHICLES_BY_ID_ERROR,\r\n  payload : {\r\n    error,\r\n  }\r\n});\r\n\r\n// FETCH PAGINATION\r\nexport const fetchPaginationVehiclesRequest = () => ({\r\n  type: ActionType.FETCH_PAGINATION_VEHICLES_REQUEST,\r\n  payload : []\r\n});\r\n\r\nexport const fetchPaginationVehiclesSuccess = vehicles => ({\r\n  type: ActionType.FETCH_PAGINATION_VEHICLES_SUCCESS,\r\n  payload : vehicles\r\n});\r\n\r\nexport const fetchPaginationVehiclesError = error => ({\r\n  type: ActionType.FETCH_PAGINATION_VEHICLES_ERROR,\r\n  payload : {\r\n    error,\r\n  }\r\n});\r\n","import axios from 'axios';\r\nimport {\r\n  fetchStarshipsByIdRequest,\r\n  fetchStarshipsByIdSuccess,\r\n  fetchStarshipsByIdError,\r\n  fetchPaginationStarshipsRequest,\r\n  fetchPaginationStarshipsSuccess\r\n} from './starshipsActions';\r\n\r\nexport const fetchStarshipsById = (count) => dispatch => {\r\nconst URL = `https://swapi.co/api/starships/${count}`\r\n  dispatch(fetchStarshipsByIdRequest());\r\n  axios\r\n    .get(URL)\r\n    .then(response => {\r\n      dispatch(fetchStarshipsByIdSuccess({...response.data, id : count}));\r\n    })\r\n    .catch(error => {\r\n      dispatch(fetchStarshipsByIdError(error));\r\n    });\r\n};\r\n\r\nexport const fetchPaginationStarships = page => dispatch => {\r\n  dispatch(fetchPaginationStarshipsRequest())\r\n  const URL = `https://swapi.co/api/starships/?page=${page}`\r\n  axios\r\n    .get(URL)\r\n    .then(response => dispatch(fetchPaginationStarshipsSuccess(response.data)))\r\n}","import {ActionType} from '../actionType'\r\n\r\nexport const fetchStarshipsByIdRequest = () => ({\r\n  type: ActionType.FETCH_STARSHIPS_BY_ID_REQUEST,\r\n  payload : {}\r\n});\r\n\r\nexport const fetchStarshipsByIdSuccess = planets => ({\r\n  type: ActionType.FETCH_STARSHIPS_BY_ID_SUCCESS,\r\n  payload : {\r\n    planets,\r\n  }\r\n});\r\n\r\nexport const fetchStarshipsByIdError = error => ({\r\n  type: ActionType.FETCH_STARSHIPS_BY_ID_ERROR,\r\n  payload : {\r\n    error,\r\n  }\r\n});\r\n\r\n\r\n// FETCH PAGINATION\r\nexport const fetchPaginationStarshipsRequest = () => ({\r\n  type: ActionType.FETCH_PAGINATION_STARSHIPS_REQUEST,\r\n  payload : []\r\n});\r\n\r\nexport const fetchPaginationStarshipsSuccess = starships => ({\r\n  type: ActionType.FETCH_PAGINATION_STARSHIPS_SUCCESS,\r\n  payload : starships\r\n});\r\n\r\nexport const fetchPaginationStarshipsError = error => ({\r\n  type: ActionType.FETCH_PAGINATION_STARSHIPS_ERROR,\r\n  payload : {\r\n    error,\r\n  }\r\n});\r\n","import React from 'react';\r\nimport { NavLink } from \"react-router-dom\";\r\nimport {connect} from 'react-redux'\r\nimport * as planetsSelectors from '../../../redux/planets/planetsSelectors'\r\nimport { Loaders } from \"../../Loaders\";\r\n\r\nconst style = {\r\n  position: 'relative',\r\n  display : 'block'\r\n}\r\n\r\nconst SpeciesList = ({planets, loading}) => {\r\n  return (\r\n    <div style={style}>\r\n      {loading && <Loaders/>}\r\n      {!loading && (\r\n        <>\r\n          {!!planets.length && (\r\n            <ul>\r\n              {planets.map((el, i) => (\r\n                <li key={ i * 9}>\r\n                  <NavLink to={`/planets/${el.id}`}>{el.name}</NavLink>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mSTP = state => ({\r\n  loading : planetsSelectors.getLoading(state)\r\n})\r\n\r\nexport default connect(mSTP)(SpeciesList);","import React from 'react';\r\nimport { NavLink } from \"react-router-dom\";\r\nimport {connect} from 'react-redux'\r\nimport * as speciesSelectors from '../../../redux/species/speciesSelectors'\r\nimport { Loaders } from \"../../Loaders\";\r\n\r\nconst style = {\r\n  position: 'relative',\r\n  display : 'block'\r\n}\r\n\r\nconst SpeciesList = ({species, loading}) => {\r\n  return (\r\n    <div style={style}>\r\n      {loading && <Loaders/>}\r\n      {!loading && (\r\n        <>\r\n          {!!species.length && (\r\n            <ul>\r\n              {species.map((el, i) => (\r\n                <li key={ i * 9}>\r\n                  <NavLink to={`/species/${el.id}`}>{el.name}</NavLink>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mSTP = state => ({\r\n  loading : speciesSelectors.getLoading(state)\r\n})\r\n\r\nexport default connect(mSTP)(SpeciesList);","import React from 'react';\r\nimport { NavLink } from \"react-router-dom\";\r\nimport {connect} from 'react-redux'\r\nimport * as vehiclesSelectors from '../../../redux/vehicles/vehiclesSelectors'\r\nimport { Loaders } from \"../../Loaders\";\r\n\r\nconst style = {\r\n  position: 'relative',\r\n  display : 'block'\r\n}\r\n\r\nconst SpeciesList = ({vehicles, loading}) => {\r\n  return (\r\n    <div style={style}>\r\n      {loading && <Loaders/>}\r\n      {!loading && (\r\n        <>\r\n          {!!vehicles.length && (\r\n            <ul>\r\n              {vehicles.map((el, i) => (\r\n                <li key={ i * 9}>\r\n                  <NavLink to={`/vehicles/${el.id}`}>{el.name}</NavLink>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mSTP = state => ({\r\n  loading : vehiclesSelectors.getLoading(state)\r\n})\r\n\r\nexport default connect(mSTP)(SpeciesList);","import React from 'react';\r\nimport { NavLink } from \"react-router-dom\";\r\nimport {connect} from 'react-redux'\r\nimport * as starshipsSelectors from '../../../redux/starships/starshipsSelectors'\r\nimport { Loaders } from \"../../Loaders\";\r\n\r\nconst style = {\r\n  position: 'relative',\r\n  display : 'block'\r\n}\r\n\r\nconst SpeciesList = ({starships, loading}) => {\r\n  console.log(starships)\r\n  return (\r\n    <div style={style}>\r\n      {loading && <Loaders/>}\r\n      {!loading && (\r\n        <>\r\n          {!!starships.length && (\r\n            <ul>\r\n              {starships.map((el, i) => (\r\n                <li key={ i * 9}>\r\n                  <NavLink to={`/starships/${el.id}`}>{el.name}</NavLink>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mSTP = state => ({\r\n  loading : starshipsSelectors.getLoading(state)\r\n})\r\n\r\nexport default connect(mSTP)(SpeciesList);","import React from 'react'\r\nimport { NavLink, useHistory } from 'react-router-dom'\r\nimport {connect} from 'react-redux'\r\nimport * as filmsSelectors from '../../../redux/films/filmsSelectors'\r\nimport * as peopleSelectors from '../../../redux/people/peopleSelectors'\r\nimport * as planetsSelectors from '../../../redux/planets/planetsSelectors'\r\nimport * as starshipsSelectors from '../../../redux/starships/starshipsSelectors'\r\nimport * as speciesSelectors from '../../../redux/species/speciesSelectors'\r\nimport * as vehiclesSelectors from '../../../redux/vehicles/vehiclesSelectors'\r\nimport { Loaders } from \"../../Loaders\";\r\nimport SpeciesList from \"../../Species/SpeciesList/SpeciesList\";\r\nimport VehiclesList from \"../../Vehicles/VehiclesList/VehiclesList\";\r\nimport StarshipsList from \"../../Starships/StarshipsList/StarshipsList\";\r\nimport PlanetsList from \"../../Planets/PlanetsList/PlanetsList\";\r\nimport PeopleList from \"../../People/PeopleList/PeopleList\";\r\n\r\nconst DetailFilms = ({\r\n  people,\r\n  allPlanets,\r\n  allStarships,\r\n  allVehicles,\r\n  allSpecies,\r\n  title,\r\n  opening_crawl,\r\n  director,\r\n  producer,\r\n  release_date,\r\n  characters,\r\n  planets,\r\n  starships,\r\n  vehicles,\r\n  species,\r\n  loading\r\n}) => {\r\n\r\n  const history = useHistory()\r\n\r\n  const handlerBack = () => {\r\n    history.goBack()\r\n  }\r\n\r\n  if(loading) {\r\n    return <Loaders/>\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <p>Titile : {title}</p>\r\n      <p>Decription: {opening_crawl}</p>\r\n      <p>Director: {director}</p>\r\n      <p>Producer: {producer}</p>\r\n      <p>Release Date: {release_date}</p>\r\n\r\n      {/*CHARACTERS*/}\r\n      {!!characters.length && (\r\n        <div>\r\n          <h2>characters</h2>\r\n          <PeopleList people={people}/>\r\n        </div>\r\n      )}\r\n\r\n      {/*PLANETS*/}\r\n      {!!planets.length && (\r\n        <div>\r\n          <h2>planets</h2>\r\n          <PlanetsList planets={allPlanets}/>\r\n        </div>\r\n      )}\r\n\r\n      {/*STARSHIPS*/}\r\n      {!!starships.length && (\r\n        <div>\r\n          <h2>starships</h2>\r\n          <StarshipsList starships={allStarships}/>\r\n        </div>\r\n      )}\r\n\r\n      {/*VEHICLES*/}\r\n      {!!vehicles.length && (\r\n        <div>\r\n          <h2>vehicles</h2>\r\n          <VehiclesList vehicles={allVehicles}/>\r\n        </div>\r\n      )}\r\n\r\n      {/*SPECIES*/}\r\n      {!!species.length && (\r\n        <div>\r\n          <h2>species</h2>\r\n          <SpeciesList species={allSpecies}/>\r\n        </div>\r\n      )}\r\n\r\n      <button\r\n        onClick={handlerBack}\r\n      >\r\n        Back\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mSTP = state => ({\r\n  loading : filmsSelectors.getLoading(state),\r\n  people : peopleSelectors.getPeople(state),\r\n  allPlanets : planetsSelectors.getPlanets(state),\r\n  allStarships : starshipsSelectors.getStarships(state),\r\n  allVehicles : vehiclesSelectors.getAllVehicles(state),\r\n  allSpecies : speciesSelectors.getAllSpecies(state),\r\n})\r\n\r\nexport default connect(mSTP)(DetailFilms)","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { useParams } from 'react-router-dom'\r\nimport * as filmsSelectors from '../redux/films/filmsSelectors'\r\nimport * as peopleOperations from '../redux/people/peopleOperations'\r\nimport * as planetsOperations from '../redux/planets/planetsOperations'\r\nimport * as starshipsOperation from '../redux/starships/starshipsOperations'\r\nimport * as vehiclesOperations from '../redux/vehicles/vehiclesOperations'\r\nimport * as speciesOperations from '../redux/species/speciesOperations'\r\nimport DetailFilms from '../components/Films/DetailFilms/DetailFilms'\r\n\r\nexport const DetailFilmsPage = ({\r\n  films,\r\n  fetchPeopleById,\r\n  fetchPlanetsById,\r\n  fetchStarshipsById,\r\n  fetchVehiclesById,\r\n  fetchSpeciesById\r\n}) => {\r\n  const filmId = Number(useParams().id)\r\n  const film = films.filter(el => el.episode_id === filmId)[0]\r\n\r\n  if (film) {\r\n    film.characters.map(el => {\r\n      const count = Number(el.split('/')[5])\r\n      return fetchPeopleById(count)\r\n    })\r\n    film.planets.map(el => {\r\n      const count = Number(el.split('/')[5])\r\n      return fetchPlanetsById(count)\r\n    })\r\n    film.starships.map(el => {\r\n      const count = Number(el.split('/')[5])\r\n      return fetchStarshipsById(count)\r\n    })\r\n    film.vehicles.map(el => {\r\n      const count = Number(el.split('/')[5])\r\n      return fetchVehiclesById(count)\r\n    })\r\n    film.species.map(el => {\r\n      const count = Number(el.split('/')[5])\r\n      return fetchSpeciesById(count)\r\n    })\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      {film &&  <DetailFilms {...film}/>}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mSTP = state => ({\r\n  films: filmsSelectors.getAllFilms(state)\r\n})\r\n\r\nconst mDTP = {\r\n  fetchPeopleById: peopleOperations.fetchPeopleById,\r\n  fetchPlanetsById: planetsOperations.fetchPlanetsById,\r\n  fetchStarshipsById: starshipsOperation.fetchStarshipsById,\r\n  fetchVehiclesById: vehiclesOperations.fetchVehiclesById,\r\n  fetchSpeciesById: speciesOperations.fetchSpeciesById,\r\n}\r\n\r\nexport default connect(mSTP, mDTP)(DetailFilmsPage)","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","export const getAllFilms = state => state.films.items\r\n\r\nexport const getLoading = state => state.films.loading\r\n","export const getPeople = state => state.people.items.sort((a, b) => {\r\n return a.name > b.name\r\n})\r\n\r\nexport const getLoading = state => state.people.loading\r\n\r\n\r\n//PAGINATION\r\nexport const paginationPeople = state => state.people.paginationPeople.results\r\n\r\nexport const peoplePrev = state => state.people.paginationPeople.previous\r\n\r\nexport const peopleNext = state => state.people.paginationPeople.next\r\n","export const getPlanets = state => state.planets.items\r\n\r\nexport const getLoading = state => state.planets.loading\r\n\r\n//PAGINATION\r\nexport const paginationPlanets = state => state.planets.paginationPlanets.results\r\n\r\nexport const planetsPrev = state => state.planets.paginationPlanets.previous\r\n\r\nexport const planetsNext = state => state.planets.paginationPlanets.next\r\n","export const getAllSpecies = state => state.species.items\r\n\r\nexport const getLoading = state => state.species.loading\r\n\r\n//PAGINATION\r\nexport const paginationSpecies = state => state.species.paginationSpecies.results\r\n\r\nexport const speciesPrev = state => state.species.paginationSpecies.previous\r\n\r\nexport const speciesNext = state => state.species.paginationSpecies.next\r\n"],"sourceRoot":""}